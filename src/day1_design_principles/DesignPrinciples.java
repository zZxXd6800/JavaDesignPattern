package day1_design_principles;

/**
 * 设计模式的七大原则：
 * 1.单一职责原则：
 *      a.对类来说，一个类应该只负责一项职责，降低类的复杂度
 *      b.提高类的可读性，可维护性
 *      c.降低变更引起的风险
 *      d.通常情况下我们应该遵守单一职责原则，只有逻辑足够简单，才可以在代码级别违反单一职责原则，
 *        如果类中方法数量足够少，可以在方法级别保持单一职责原则
 * 2.接口隔离原则：
 *      a.客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上
 * 3.依赖倒置原则：
 *      a.高层模块不应该依赖低层模块，二者都应该依赖其抽象
 *      b.抽象不应该依赖细节，细节应该依赖抽象
 *      c.依赖倒置的中心思想是面向接口编程
 *      d.相对于细节的多变性，抽象的东西要稳定得多，以抽象为基础搭建的架构比以细节为基础的架构稳定的多
 *        java中抽象指接口或抽象类，细节就是具体的实现类
 *      e.使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成
 * 4.里氏替换原则：
 * 5.开闭原则：
 * 6.迪米特法则：
 * 7.合成复用原则：
 */
public class DesignPrinciples {
}
