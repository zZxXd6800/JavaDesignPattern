package day1_design_principle;

/**
 * 设计模式的七大原则：
 * 1.单一职责原则：
 *      a.对类来说，一个类应该只负责一项职责，降低类的复杂度
 *      b.提高类的可读性，可维护性
 *      c.降低变更引起的风险
 *      d.通常情况下我们应该遵守单一职责原则，只有逻辑足够简单，才可以在代码级别违反单一职责原则，
 *        如果类中方法数量足够少，可以在方法级别保持单一职责原则
 * 2.接口隔离原则：
 *      a.客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上
 * 3.依赖倒置原则：
 *      a.高层模块不应该依赖低层模块，二者都应该依赖其抽象
 *      b.抽象不应该依赖细节，细节应该依赖抽象
 *      c.依赖倒置的中心思想是面向接口编程
 *      d.相对于细节的多变性，抽象的东西要稳定得多，以抽象为基础搭建的架构比以细节为基础的架构稳定的多
 *        java中抽象指接口或抽象类，细节就是具体的实现类
 *      e.使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成
 * 4.里氏替换原则（LSP）：
 *      a.所有引用基类的地方必须能够透明的使用其子类的对象
 *        即：子类型能够完全替换父类型，而不会让调用父类型的客户程序从行为上有任何改变
 *      b.在子类中尽量不要重写父类的方法
 *      c.继承实际上增强了两个类之间的耦合性，在适当的情况下可以通过聚合、组合、依赖来解决问题
 *      d.若子类A需要修改父类B中的方法，可以提取一个基类C，让A和B都继承自C
 * 5.开闭原则（OCP）：
 *      a.一个软件实体如类、模块、函数应该对扩展开放，对修改关闭。用抽象构建框架，用实现扩展细节
 *      b.当软件需要改变时，尽量通过拓展软件实体的行为来实现改变，而不是通过修改已有的代码来实现改变
 * 6.迪米特原则（最少知道原则）：
 *      a.一个对象应该对其他对象保持最少的了解，类与类关系越密切，耦合度越大
 *      b.一个类对自己依赖的类知道的越少越好，被依赖的类无论多复杂，都尽量将逻辑封装在内部，对外只提供一个public方法
 *      c.不要以局部变量的形式在类的内部引入陌生的类，应该通过成员变量、方法参数、返回值的方式，降低类之间的耦合关系
 * 7.合成复用原则：
 *      a.尽量使用组合/聚合的方式，而不是使用继承
 */
public class DesignPrinciples {
    /**
     * 核心思想：
     * a.找出程序中可能会发生改变的地方，将他们独立出来，而不是和其他不变的代码混在一起
     * b.针对接口编程，而不是针对实现编程
     * c.努力使对象之间松耦合
     */
}
