package day14_proxy;

/**
 * 代理模式：为对象提供一个替身，以控制这个对象的访问，即通过代理对象访问目标对象，在目标对象实现的基础上，拓展目标对象的功能
 * 被代理的对象：远程对象、创建开销大的对象、需要安全控制的对象
 * 分类：
 *      1.静态代理：定义接口或父类，目标对象和代理对象一起实现相同的接口或者继承相同的父类
 *          优点：在不修改目标对象功能的前提下，可以通过代理对象对目标功能进行拓展
 *          缺点：代理对象与目标对象要实现相同的接口，因此会有很多的代理类，一旦接口增加方法，目标对象和代理对象都需要维护
 *      2.动态代理（jdk代理/接口代理）：代理对象不需要实现接口，目标对象需要实现接口，利用JDK的Proxy.newProxyInstance()方法动态的在内存中构建代理对象
 *      3.Cglib代理（可以在内存动态的创建对象，而不需要实现接口，属于动态代理的范畴）：
 */
public class Proxy {
}
